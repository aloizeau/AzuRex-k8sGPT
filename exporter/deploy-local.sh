#!/bin/bash
set -e

echo "======================================"
echo "üöÄ D√©ploiement K8sGPT Monitoring"
echo "======================================"
echo ""

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
NAMESPACE="k8sgpt"
DOCKER_IMAGE_NAME="k8sgpt-exporter:latest"

# V√©rifications pr√©alables
echo "‚úì V√©rification des pr√©requis..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl n'est pas install√©"
    exit 1
fi

# V√©rifier la connexion √† Kubernetes
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Impossible de se connecter au cluster Kubernetes"
    exit 1
fi

echo "‚úÖ Tous les pr√©requis sont pr√©sents"
echo ""

# Step 1: Build l'image Docker locale
echo "üì¶ √âtape 1: Build l'image Docker localement..."
cd "$SCRIPT_DIR"
docker build -t "$DOCKER_IMAGE_NAME" .

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors du build Docker"
    exit 1
fi
echo "‚úÖ Image Docker build√©e: $DOCKER_IMAGE_NAME"
echo ""

# Step 2: Charger l'image dans le cluster local (si minikube ou kind)
if command -v minikube &> /dev/null && minikube status &> /dev/null; then
    echo "üì¶ √âtape 2: Charger l'image dans minikube..."
    minikube image load "$DOCKER_IMAGE_NAME"
    echo "‚úÖ Image charg√©e dans minikube"
    echo ""
elif command -v kind &> /dev/null; then
    echo "üì¶ √âtape 2: Charger l'image dans kind..."
    kind load docker-image "$DOCKER_IMAGE_NAME"
    echo "‚úÖ Image charg√©e dans kind"
    echo ""
else
    echo "‚ö†Ô∏è  Cluster local non d√©tect√© (minikube/kind)"
    echo "   Si vous utilisez Docker Desktop Kubernetes, l'image sera automatiquement disponible"
    echo ""
fi

# Step 3: Cr√©er le namespace si n√©cessaire
echo "üìù √âtape 3: V√©rifier/cr√©er le namespace..."
if kubectl get namespace "$NAMESPACE" &> /dev/null; then
    echo "‚úÖ Namespace $NAMESPACE existe d√©j√†"
else
    echo "   Cr√©ation du namespace $NAMESPACE..."
    kubectl create namespace "$NAMESPACE"
    echo "‚úÖ Namespace $NAMESPACE cr√©√©"
fi
echo ""

# Step 4: D√©ployer les ressources
echo "üöÄ √âtape 4: D√©ploiement des ressources Kubernetes..."
kubectl apply -f k8sgpt-exporter-deployment.yaml

if [ $? -ne 0 ]; then
    echo "‚ùå Erreur lors du d√©ploiement"
    exit 1
fi
echo "‚úÖ Ressources d√©ploy√©es"
echo ""

# Step 5: D√©ployer le ServiceMonitor (si Prometheus Operator est disponible)
echo "üìä √âtape 5: V√©rification de Prometheus Operator..."
if kubectl get crd servicemonitors.monitoring.coreos.com &> /dev/null; then
    echo "   Prometheus Operator d√©tect√© - D√©ploiement du ServiceMonitor..."
    kubectl apply -f k8sgpt-servicemonitor.yaml
    echo "‚úÖ ServiceMonitor d√©ploy√©"
else
    echo "‚ö†Ô∏è  Prometheus Operator non d√©tect√©"
    echo "   Vous pouvez configurer Prometheus manuellement avec le scrape config ci-dessous:"
    echo ""
    echo "   scrape_configs:"
    echo "   - job_name: 'k8sgpt-exporter'"
    echo "     kubernetes_sd_configs:"
    echo "     - role: pod"
    echo "     relabel_configs:"
    echo "     - source_labels: [__meta_kubernetes_namespace]"
    echo "       action: keep"
    echo "       regex: k8sgpt"
    echo ""
fi
echo ""

# Step 6: Attendre le d√©ploiement
echo "‚è≥ Attente du d√©ploiement..."
kubectl rollout status deployment/k8sgpt-exporter -n "$NAMESPACE" --timeout=5m

if [ $? -ne 0 ]; then
    echo "‚ùå Le d√©ploiement n'a pas abouti dans le d√©lai imparti"
    echo "V√©rification des logs:"
    kubectl logs -n "$NAMESPACE" -l app=k8sgpt-exporter --tail=50
    exit 1
fi
echo "‚úÖ D√©ploiement r√©ussi"
echo ""

# Step 7: V√©rifier le service
echo "üîç √âtape 6: V√©rification du service..."
kubectl get svc -n "$NAMESPACE"
echo ""

# Step 8: Afficher les informations de connexion
echo "======================================"
echo "‚úÖ D√âPLOIEMENT R√âUSSI!"
echo "======================================"
echo ""
echo "üìä Pour acc√©der aux m√©triques:"
echo ""

# Port forward
echo "Option 1 - Port forward local:"
echo "  kubectl port-forward -n $NAMESPACE svc/k8sgpt-exporter 8080:8080"
echo "  Puis acc√©dez √†: http://localhost:8080/metrics"
echo ""

# Service DNS
echo "Option 2 - DNS Kubernetes (depuis le cluster):"
echo "  http://k8sgpt-exporter.$NAMESPACE.svc.cluster.local:8080/metrics"
echo ""

# Troubleshooting
echo "üîß Pour v√©rifier les logs:"
echo "  kubectl logs -n $NAMESPACE -l app=k8sgpt-exporter -f"
echo ""

echo "üìù Prochaines √©tapes:"
echo "1. Configurer Prometheus pour scraper: http://k8sgpt-exporter.$NAMESPACE.svc.cluster.local:8080/metrics"
echo "2. Importer le dashboard Grafana fourni"
echo "3. Configurer les alertes dans Prometheus"
echo ""
